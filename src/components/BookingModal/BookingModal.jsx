// src/components/BookingModal/BookingModal.jsx
import React, { useState, useEffect, useCallback } from 'react';
import styles from './BookingModal.module.scss';
import { supabase } from '../../supabaseClient';
import { IMaskInput } from 'react-imask';

import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';

import { DateTime, Interval } from 'luxon';

const getTodayDateString = () => new Date().toISOString().split('T')[0];

const BookingModal = ({ isOpen, onClose, currentUserId, currentUserEmail }) => {
  const [step, setStep] = useState(1);
  const [bookingDate, setBookingDate] = useState(null);
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [selectedRoom, setSelectedRoom] = useState('');
  const [numberOfPeople, setNumberOfPeople] = useState(1);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [userName, setUserName] = useState('');
  const [comment, setComment] = useState('');
  const [durationHours, setDurationHours] = useState(1);
  const [eventName, setEventName] = useState('');
  const [eventDescription, setEventDescription] = useState('');
  const [organizerContact, setOrganizerContact] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState(null);
  const [isAgreed, setIsAgreed] = useState(false);
  const [isBookingSuccessful, setIsBookingSuccessful] = useState(false);
  const [conflict, setConflict] = useState(null);
  const [suggestedSlots, setSuggestedSlots] = useState([]);
  const [fullyBookedDates, setFullyBookedDates] = useState([]);
  const [pendingDates, setPendingDates] = useState([]);
  const [isSlotPending, setIsSlotPending] = useState(false);

  const maxBookingDurationHours = 3;
  // üí° –¢–µ–ø–µ—Ä—å –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è - 1 —á–∞—Å
  const bufferTimeHours = 1; 
  
  const maxPeople = selectedRoom === 'second_hall' ? 20 : selectedRoom === 'summer_terrace' ? 10 : 1;

  const getRoomName = useCallback((roomKey) => {  
    switch (roomKey) {
      case 'second_hall':
        return '–í—Ç–æ—Ä–æ–π –∑–∞–ª –≤–Ω—É—Ç—Ä–∏';
      case 'summer_terrace':
        return '–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª';
    }
  }, []);
  
  const getAvailableSlots = useCallback(async (date, room, duration) => {
    if (!date || !room || !duration) return [];

    const dateString = date.toISOString().split('T')[0];

    setLoading(true);
    try {
      const { data: bookings, error: fetchError } = await supabase
        .from('bookings')
        .select('start_time, end_time, status')
        .eq('booking_date', dateString)
        .eq('selected_room', room)
        // üí° –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'canceled'
        .neq('status', 'canceled');
      
      if (fetchError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', fetchError.message);
        return [];
      }
      
      const allSlots = [];
      // üí° –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å 9:00 –Ω–∞ 8:00
      const cafeOpenHour = 8;
      const cafeCloseHour = 22;
      const intervalMinutes = 30;
      const durationMinutes = duration * 60;
      const bufferMinutes = bufferTimeHours * 60;
      
      const dateObj = DateTime.fromJSDate(date).setZone('Asia/Almaty');
    const now = DateTime.local().setZone('Asia/Almaty');

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ –æ–∂–∏–¥–∞—é—â–∏–µ) –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
      const occupiedIntervals = [];
      for (const booking of bookings) {
        const bookingStartTime = DateTime.fromISO(`${dateString}T${booking.start_time}`);
        const bookingEndTime = DateTime.fromISO(`${dateString}T${booking.end_time}`);
        
        // üí° –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∏ –ø–æ—Å–ª–µ
        const occupiedStart = bookingStartTime.minus({ minutes: bufferMinutes });
        const occupiedEnd = bookingEndTime.plus({ minutes: bufferMinutes });
        occupiedIntervals.push(Interval.fromDateTimes(occupiedStart, occupiedEnd));
      }

      let currentStart = dateObj.set({ hour: cafeOpenHour, minute: 0, second: 0, millisecond: 0 });
      // üí° –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏ –∏ –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
      const lastPossibleSlotStart = dateObj.set({ hour: cafeCloseHour, minute: 0, second: 0, millisecond: 0 }).minus({ minutes: durationMinutes });

      while (currentStart <= lastPossibleSlotStart) {
        const currentEnd = currentStart.plus({ minutes: durationMinutes });
        const slotInterval = Interval.fromDateTimes(currentStart, currentEnd);

        if (currentEnd < now) {
            currentStart = currentStart.plus({ minutes: intervalMinutes });
            continue;
        }
        
        // üí° –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Å–ª–æ—Ç —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –∑–∞–Ω—è—Ç—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        const isAvailable = !occupiedIntervals.some(occupiedInterval => slotInterval.overlaps(occupiedInterval));
        
        allSlots.push({
            start: currentStart.toFormat('HH:mm'),
            end: currentEnd.toFormat('HH:mm'),
            isAvailable: isAvailable,
            isPending: false // üí° –≠—Ç–æ –ø–æ–ª–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –±—É–¥—É—Ç isAvailable: false
        });
        
        currentStart = currentStart.plus({ minutes: intervalMinutes });
      }
      
      return allSlots;
    } finally {
      setLoading(false);
    }
  }, [bufferTimeHours]);
  
  const sendBooking = async (statusToSet = 'pending') => {
    setLoading(true);
    setMessage('');
    setError(null);
    setConflict(null);
  
    const { data: { user }, error: authError } = await supabase.auth.getUser();
  
    if (authError || !user) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.');
      setLoading(false);
      return;
    }
      
    if (!isAgreed) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
        setLoading(false);
        return;
    }
  
    if (!bookingDate || !startTime || !endTime || !selectedRoom || !phoneNumber || !userName) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
      setLoading(false);
      return;
    }
    
    if (startTime === '' || endTime === '') {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç.');
        setLoading(false);
        return;
    }
  
    try {
      const { data: bookingResult, error: invokeError } = await supabase.functions.invoke('book-table', {
          body: {
              organizer_name: userName,
              booking_date: DateTime.fromJSDate(bookingDate).toISODate(),
              start_time: startTime,
              end_time: endTime,
              num_people: numberOfPeople,
              comments: comment,
              user_id: user.id,
              selected_room: selectedRoom,
              event_name: eventName,
              event_description: eventDescription,
              organizer_contact: organizerContact,
              phone_number: phoneNumber,
              status_to_set: statusToSet, 
          },
          method: 'POST',
      });
  
      if (invokeError) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Edge Function:', invokeError);
          setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          return;
      }
      
      if (bookingResult.error) {
          setError(bookingResult.error);
          return;
      }
  
      if (bookingResult.booking.status === 'pending') {
          setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!');
      } else if (bookingResult.booking.status === 'queued') {
          setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è!');
      }
      setIsBookingSuccessful(true);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏:', err.message);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏: ${err.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await sendBooking('pending');
  };

  const handleQueueBooking = async (e) => {
    e.preventDefault();
    await sendBooking('queued');
  };

  useEffect(() => {
    if (isOpen) {
      setStep(1);
      setUserName('');
      const today = new Date();
      setBookingDate(today);
      setStartTime('');
      setEndTime('');
      setSelectedRoom('');
      setNumberOfPeople(1);
      setPhoneNumber('');
      setComment('');
      setEventName('');
      setEventDescription('');
      setOrganizerContact('');
      setMessage('');
      setError(null);
      setIsAgreed(false);
      setConflict(null);
      setSuggestedSlots([]);
      setFullyBookedDates([]);
      setPendingDates([]);
      setDurationHours(1);
      setIsBookingSuccessful(false);
    }
  }, [isOpen]);
  
  useEffect(() => {
    const fetchCalendarHighlights = async () => {
      if (step === 2 && selectedRoom && durationHours) {
        setLoading(true);
        const { data: allBookings, error } = await supabase
            .from('bookings')
            .select('booking_date, status')
            .eq('selected_room', selectedRoom)
            .gte('booking_date', getTodayDateString());
        
        if (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error.message);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.');
            setLoading(false);
            return;
        }

        const datesWithBookings = [...new Set(allBookings.map(b => b.booking_date))];
        const fullyBooked = [];
        
        for (const dateString of datesWithBookings) {
            const tempDate = new Date(dateString);
            const slots = await getAvailableSlots(tempDate, selectedRoom, durationHours);
            
            // üí° –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            if (slots.every(slot => !slot.isAvailable)) {
                fullyBooked.push(dateString);
            }
        }
        
        // üí° –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π —Å—Ç–µ–π—Ç –¥–ª—è pendingDates, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ isAvailable
        setFullyBookedDates(fullyBooked);
        setPendingDates([]);
        setLoading(false);
      }
    };
    fetchCalendarHighlights();
  }, [step, selectedRoom, durationHours, getAvailableSlots]);

  if (!isOpen) return null;

  const handleNextStep = async () => {
    setError(null);
    setMessage('');
    if (!selectedRoom || !numberOfPeople || !durationHours) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
        return;
    }
    
    const minPeople = 1;
    if (numberOfPeople < minPeople || numberOfPeople > maxPeople) {
        setError(`–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${minPeople} –¥–æ ${maxPeople}.`);
        return;
    }
    
    if (durationHours <= 0) {
      setError('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.');
      return;
    }
    if (durationHours > maxBookingDurationHours) {
      setError(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - ${maxBookingDurationHours} —á–∞—Å–∞.`);
      return;
    }
    
    setStep(2);
    const today = new Date();
    setBookingDate(today);
    setLoading(true);
    const slots = await getAvailableSlots(today, selectedRoom, durationHours);
    setSuggestedSlots(slots);
    setLoading(false);
  };
  
  const handleDateChange = async (date) => {
    setBookingDate(date);
    setError(null);
    setMessage('');
    setStartTime('');
    setEndTime('');
    setLoading(true);
    const slots = await getAvailableSlots(date, selectedRoom, durationHours);
    setSuggestedSlots(slots);
    setLoading(false);
  };

  const handleTimeSelect = (slot) => {
    setStartTime(slot.start);
    setEndTime(slot.end);
    // üí° –≠—Ç–æ—Ç —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
    // setIsSlotPending(slot.isPending); 
    setError(null);
    setMessage('');
  };

  const handleBackStep = () => {
    setStep(1);
    setError(null);
    setSuggestedSlots([]);
  };

  const isDateDisabled = ({ date }) => {
    const dateString = date.toISOString().split('T')[0];
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (date < today) {
      return true;
    }

    return fullyBookedDates.includes(dateString);
  };
  
  const tileClassName = ({ date, view }) => {
    if (view === 'month') {
        const dateString = date.toISOString().split('T')[0];
        if (fullyBookedDates.includes(dateString)) {
            return styles.fullyBooked;
        }
        // üí° –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è pendingDates, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    }
    return null;
  };
  
  const formatDurationLabel = (value) => {
    if (value < 1) return `${value * 60} –º–∏–Ω—É—Ç`;
    if (value === 1) return `1 —á–∞—Å`;
    return `${value} —á–∞—Å–∞`;
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose} disabled={loading}>
          &times;
        </button>
        
        {isBookingSuccessful ? (
          <div className={styles.successContainer}>
            <h2 className={styles.successTitle}>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</h2>
            <p className={styles.successText}>{message}</p>
            <p className={styles.successSubtext}>
              –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
            </p>
            <button className={styles.backButton} onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        ) : (
          <>
            <h2>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫</h2>
            {error && <p className={styles.errorMessage}>{error}</p>}
            {message && <p className={styles.successMessage}>{message}</p>}

            {step === 1 && (
              <form onSubmit={(e) => { e.preventDefault(); handleNextStep(); }}>
                <div className={styles.section}>
                  <h3>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                  <div className={styles.formGroup}>
                    <label htmlFor="selectedRoom">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:</label>
                    <div className={styles.hallSelector}>
                      <button
                        type="button"
                        className={`${styles.hallButton} ${selectedRoom === 'second_hall' ? styles.active : ''}`}
                        onClick={() => {
                          setSelectedRoom('second_hall');
                          setNumberOfPeople(1);
                        }}
                        disabled={loading}
                      >
                        –ó–∞–ª
                      </button>
                      <button
                        type="button"
                        className={`${styles.hallButton} ${selectedRoom === 'summer_terrace' ? styles.active : ''}`}
                        onClick={() => {
                          setSelectedRoom('summer_terrace');
                          setNumberOfPeople(1);
                        }}
                        disabled={loading}
                      >
                        –õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞
                      </button>
                    </div>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label htmlFor="numberOfPeople">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:</label>
                    <div className={styles.partySizeControl}>
                      <button type="button" onClick={() => setNumberOfPeople(prev => Math.max(1, prev - 1))} disabled={loading || numberOfPeople <= 1 || !selectedRoom}>-</button>
                      <input
                        type="number"
                        id="numberOfPeople"
                        value={numberOfPeople}
                        onChange={(e) => setNumberOfPeople(Number(e.target.value))}
                        min="1"
                        max={maxPeople}
                        required
                        disabled={loading || !selectedRoom}
                      />
                      <button type="button" onClick={() => setNumberOfPeople(prev => Math.min(maxPeople, prev + 1))} disabled={loading || numberOfPeople >= maxPeople || !selectedRoom}>+</button>
                    </div>
                    {selectedRoom && (
                      <p className={styles.maxPeopleInfo}>–ú–∞–∫—Å–∏–º—É–º: {maxPeople} —á–µ–ª–æ–≤–µ–∫</p>
                    )}
                  </div>
                  
                  <div className={styles.formGroup}>
                      <label htmlFor="durationHours">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</label>
                      <div className={styles.durationControl}>
                          <input
                              type="range"
                              id="durationHours"
                              value={durationHours}
                              onChange={(e) => setDurationHours(Number(e.target.value))}
                              min="0.5"
                              max={maxBookingDurationHours}
                              step="0.5"
                              required
                              disabled={loading}
                          />
                          <div className={styles.durationLabel}>
                              {formatDurationLabel(durationHours)}
                          </div>
                          <div className={styles.durationSteps}>
                              <span>30 –º–∏–Ω</span>
                              <span>1 —á</span>
                              <span>1.5 —á</span>
                              <span>2 —á</span>
                              <span>2.5 —á</span>
                              <span>3 —á</span>
                          </div>
                      </div>
                  </div>
                </div>

                <button type="submit" className={styles.submitButton} disabled={loading || !selectedRoom}>
                  –î–∞–ª–µ–µ
                </button>
              </form>
            )}

            {step === 2 && (
              <>
                <button onClick={handleBackStep} className={styles.backButton} disabled={loading}>
                    ‚Üê –ù–∞–∑–∞–¥
                </button>

                <div className={styles.bookingStep2}>
                    <div className={styles.calendarContainer}>
                        <Calendar
                            onChange={handleDateChange}
                            value={bookingDate}
                            minDate={new Date()}
                            tileDisabled={isDateDisabled}
                            tileClassName={tileClassName}
                        />
                    </div>
                    
                    {loading && <p className={styles.loadingMessage}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω...</p>}
                    
                    {suggestedSlots.length > 0 && !loading ? (
                      <div className={styles.availableSlotsContainer}>
                        <p className={styles.slotsHeader}>–°–ª–æ—Ç—ã –Ω–∞ {bookingDate?.toLocaleDateString()}</p>
                        <div className={styles.suggestedSlotsScroll}>
                          <div className={styles.suggestedSlotsContainer}>
                            {suggestedSlots.map((slot, index) => (
                              <button 
                                key={index} 
                                type="button"
                                // üí° –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
                                className={`${styles.suggestedSlotButton} ${startTime === slot.start && styles.selectedSlot} ${!slot.isAvailable ? styles.slotUnavailable : ''}`}
                                // üí° –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π, –µ—Å–ª–∏ isAvailable: false
                                onClick={() => slot.isAvailable && handleTimeSelect(slot)}
                                disabled={!slot.isAvailable}
                              >
                                {slot.start} - {slot.end}
                              </button>
                            ))}
                          </div>
                        </div>
                      </div>
                    ) : (
                      !loading && <p className={styles.noSlotsMessage}>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.</p>
                    )}
                </div>

                {startTime && (
                    <form onSubmit={handleSubmit}>
                        <div className={styles.section}>
                          <h3>–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                          <p className={styles.sectionDescription}>–î–ª—è —Å–≤—è–∑–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
                          <div className={styles.formGroup}>
                            <label htmlFor="userName">–í–∞—à–µ –∏–º—è (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏):</label>
                            <input
                                type="text"
                                id="userName"
                                value={userName}
                                onChange={(e) => setUserName(e.target.value)}
                                required
                                disabled={loading}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                            />
                          </div>
                          <div className={styles.formGroup}>
                            <label htmlFor="phoneNumber">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                            <IMaskInput
                                mask="+{7}(000)000-00-00"
                                definitions={{
                                '#': /[0-9]/,
                                }}
                                value={phoneNumber}
                                onAccept={(value) => setPhoneNumber(value)}
                                placeholder="+7(___)___-__-__"
                                required
                                disabled={loading}
                                className={styles.input}
                            />
                          </div>
                        </div>

                        <div className={styles.section}>
                          <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ <small>(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</small></h3>
                          <p className={styles.sectionDescription}>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö.</p>
                          <div className={styles.formGroup}>
                            <label htmlFor="eventName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>
                            <input
                                type="text"
                                id="eventName"
                                value={eventName}
                                onChange={(e) => setEventName(e.target.value)}
                                disabled={loading}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é"
                            />
                          </div>

                          <div className={styles.formGroup}>
                            <label htmlFor="eventDescription">–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>
                            <textarea
                                id="eventDescription"
                                rows="3"
                                value={eventDescription}
                                onChange={(e) => setEventDescription(e.target.value)}
                                disabled={loading}
                                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å."
                            ></textarea>
                          </div>

                          <div className={styles.formGroup}>
                            <label htmlFor="organizerContact">–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π:</label>
                            <input
                                type="text"
                                id="organizerContact"
                                value={organizerContact}
                                onChange={(e) => setOrganizerContact(e.target.value)}
                                disabled={loading}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @–Ω–∞—à_–∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏–ª–∏ +77001234567"
                            />
                          </div>
                        </div>
                        
                        <div className={styles.formGroup}>
                          <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <small>(–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</small>:</label>
                          <textarea
                              id="comment"
                              rows="3"
                              value={comment}
                              onChange={(e) => setComment(e.target.value)}
                              disabled={loading}
                          ></textarea>
                        </div>

                        <div className={`${styles.formGroup} ${styles.agreementCheckbox}`}>
                        <input
                            type="checkbox"
                            id="agreement"
                            checked={isAgreed}
                            onChange={(e) => setIsAgreed(e.target.checked)}
                            disabled={loading}
                        />
                        <label htmlFor="agreement" className={styles.agreementLabel}>
                            –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å <a href="/documentsPdf/rules_compressed.pdf" target="_blank" rel="noopener noreferrer">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>
                        </label>
                        </div>
                        
                        <button type="submit" className={styles.submitButton} disabled={!isAgreed || loading}>
                            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}
                        </button>
                    </form>
                )}
              </>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default BookingModal;
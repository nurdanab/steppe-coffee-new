// src/components/BookingModal/BookingModal.jsx

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { IMaskInput } from 'react-imask';
import styles from './BookingModal.module.scss';
import { supabase } from '../../supabaseClient';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { DateTime, Interval } from 'luxon';

const BookingModal = ({ isOpen, onClose, currentUserId, currentUserEmail }) => {
  const [step, setStep] = useState(1);
  const [bookingDate, setBookingDate] = useState(new Date());
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [selectedRoom, setSelectedRoom] = useState('');
  const [numberOfPeople, setNumberOfPeople] = useState(1);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [userName, setUserName] = useState('');
  const [comment, setComment] = useState('');
  const [durationHours, setDurationHours] = useState(1);
  const [eventName, setEventName] = useState('');
  const [eventDescription, setEventDescription] = useState('');
  const [organizerContact, setOrganizerContact] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState(null);
  const [isAgreed, setIsAgreed] = useState(false);
  const [isBookingSuccessful, setIsBookingSuccessful] = useState(false);
  const [suggestedSlots, setSuggestedSlots] = useState([]);
  const [monthlyBookings, setMonthlyBookings] = useState([]);
  const [fullyBookedDates, setFullyBookedDates] = useState([]);

  // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Luxon –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 'today' –≤ –Ω—É–∂–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ.
  const today = useMemo(() => {
    return DateTime.now().setZone('Asia/Almaty').startOf('day').toJSDate();
  }, []);

  const maxBookingDurationHours = 3;
  const bufferTimeHours = 1;
  const maxPeople = selectedRoom === 'second_hall' ? 20 : selectedRoom === 'summer_terrace' ? 10 : 1;
  const cafeOpenHour = 8;
  const cafeCloseHour = 22;

  const getRoomName = useCallback((roomKey) => {
    switch (roomKey) {
      case 'second_hall':
        return '–í—Ç–æ—Ä–æ–π –∑–∞–ª –≤–Ω—É—Ç—Ä–∏';
      case 'summer_terrace':
        return '–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª';
    }
  }, []);

  const calculateAvailableSlots = useCallback((date, room, duration, bookings) => {
    // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DateTime –∏–∑ JS Date.
    const luxonDate = DateTime.fromJSDate(date, { zone: 'Asia/Almaty' });
    const dateString = luxonDate.toISODate();
    const allSlots = [];
    const intervalMinutes = 30;
    const durationMinutes = duration * 60;
    const bufferMinutes = bufferTimeHours * 60;
    // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–æ–Ω–µ.
    const now = DateTime.now().setZone('Asia/Almaty');

    const dailyBookings = bookings.filter(b => b.booking_date === dateString && b.selected_room === room);

    const occupiedIntervals = [];
    for (const booking of dailyBookings) {
      // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DateTime –∏–∑ —Å—Ç—Ä–æ–∫–∏.
      const bookingStartTime = DateTime.fromISO(`${booking.booking_date}T${booking.start_time}`, { zone: 'Asia/Almaty' });
      const bookingEndTime = DateTime.fromISO(`${booking.booking_date}T${booking.end_time}`, { zone: 'Asia/Almaty' });
      
      const occupiedStart = bookingStartTime.minus({ minutes: bufferMinutes });
      const occupiedEnd = bookingEndTime.plus({ minutes: bufferMinutes });
      occupiedIntervals.push(Interval.fromDateTimes(occupiedStart, occupiedEnd));
    }

    let currentStart = luxonDate.set({ hour: cafeOpenHour, minute: 0, second: 0, millisecond: 0 });
    const lastPossibleSlotStart = luxonDate.set({ hour: cafeCloseHour, minute: 0, second: 0, millisecond: 0 }).minus({ minutes: durationMinutes });

    while (currentStart <= lastPossibleSlotStart) {
      const currentEnd = currentStart.plus({ minutes: durationMinutes });
      const slotInterval = Interval.fromDateTimes(currentStart, currentEnd);

      const isAvailable = !occupiedIntervals.some(occupiedInterval => slotInterval.overlaps(occupiedInterval)) && currentStart > now;
      
      allSlots.push({
        start: currentStart.toFormat('HH:mm'),
        end: currentEnd.toFormat('HH:mm'),
        isAvailable: isAvailable
      });

      currentStart = currentStart.plus({ minutes: intervalMinutes });
    }

    return allSlots;
  }, [bufferTimeHours]);

  const fetchMonthlyBookings = useCallback(async (room, duration, date) => {
    if (!room || !duration || !date) {
      setMonthlyBookings([]);
      setFullyBookedDates([]);
      return;
    }

    setLoading(true);
    setError(null);
    // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–∞—Ç–æ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–æ–Ω–µ.
    const luxonDate = DateTime.fromJSDate(date, { zone: 'Asia/Almaty' });
    const startOfMonth = luxonDate.startOf('month').toISODate();
    const endOfMonth = luxonDate.endOf('month').toISODate();

    try {
      const { data: bookings, error: fetchError } = await supabase
        .from('public_bookings_for_calendar')
        .select('booking_date, start_time, end_time, selected_room, status')
        .eq('selected_room', room)
        .gte('booking_date', startOfMonth)
        .lte('booking_date', endOfMonth);

      if (fetchError) {
        throw fetchError;
      }

      setMonthlyBookings(bookings);

      const datesWithBookings = [...new Set(bookings.map(b => b.booking_date))];
      const fullyBooked = [];
      const now = DateTime.now().setZone('Asia/Almaty');

      for (const dateString of datesWithBookings) {
        // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç DateTime —Å –Ω—É–∂–Ω–æ–π –∑–æ–Ω–æ–π.
        const tempDateLuxon = DateTime.fromISO(dateString, { zone: 'Asia/Almaty' });
        const tempDate = tempDateLuxon.toJSDate();
        const slots = calculateAvailableSlots(tempDate, room, duration, bookings);

        const allSlotsUnavailable = slots.every(slot => !slot.isAvailable);
        const atLeastOneFutureSlotExists = slots.some(slot =>
          DateTime.fromFormat(slot.start, 'HH:mm', { zone: 'Asia/Almaty' })
            .set({
              year: tempDateLuxon.year,
              month: tempDateLuxon.month,
              day: tempDateLuxon.day
            }) > now
        );

        if (allSlotsUnavailable && atLeastOneFutureSlotExists) {
          fullyBooked.push(dateString);
        }
      }

      setFullyBookedDates(fullyBooked);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü:', err.message);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.');
    } finally {
      setLoading(false);
    }
  }, [calculateAvailableSlots]);

  const sendBooking = async (statusToSet = 'pending') => {
    setLoading(true);
    setMessage('');
    setError(null);

    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.');
      setLoading(false);
      return;
    }

    if (!isAgreed) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
      setLoading(false);
      return;
    }

    if (!bookingDate || !startTime || !endTime || !selectedRoom || !phoneNumber || !userName) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç.');
      setLoading(false);
      return;
    }

    try {
      const { data: bookingResult, error: invokeError } = await supabase.functions.invoke('book-table', {
        body: {
          organizer_name: userName,
          // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ ISO-—Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º –∑–æ–Ω—ã.
          booking_date: DateTime.fromJSDate(bookingDate, { zone: 'Asia/Almaty' }).toISODate(),
          start_time: startTime,
          end_time: endTime,
          num_people: numberOfPeople,
          comments: comment,
          user_id: user.id,
          selected_room: selectedRoom,
          event_name: eventName,
          event_description: eventDescription,
          organizer_contact: organizerContact,
          phone_number: phoneNumber,
          status_to_set: statusToSet,
        },
        method: 'POST',
      });

      if (invokeError) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Edge Function:', invokeError);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }

      if (bookingResult.error) {
        setError(bookingResult.error);
        return;
      }

      if (bookingResult.booking.status === 'pending') {
        setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!');
      } else if (bookingResult.booking.status === 'queued') {
        setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è!');
      }

      setIsBookingSuccessful(true);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏:', err.message);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏: ${err.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await sendBooking('pending');
  };

  const handleQueueBooking = async (e) => {
    e.preventDefault();
    await sendBooking('queued');
  };

  useEffect(() => {
    if (isOpen) {
      setStep(1);
      setBookingDate(new Date());
      setStartTime('');
      setEndTime('');
      setSelectedRoom('');
      setNumberOfPeople(1);
      setPhoneNumber('');
      setComment('');
      setEventName('');
      setEventDescription('');
      setOrganizerContact('');
      setMessage('');
      setError(null);
      setIsAgreed(false);
      setSuggestedSlots([]);
      setMonthlyBookings([]);
      setFullyBookedDates([]);
      setDurationHours(1);
      setIsBookingSuccessful(false);
    }
  }, [isOpen]);

  useEffect(() => {
    if (step === 2 && selectedRoom && durationHours && bookingDate) {
      fetchMonthlyBookings(selectedRoom, durationHours, bookingDate);
    }
  }, [step, selectedRoom, durationHours, bookingDate, fetchMonthlyBookings]);

  useEffect(() => {
    if (step === 2 && bookingDate && selectedRoom && durationHours && monthlyBookings.length > 0) {
      const slots = calculateAvailableSlots(bookingDate, selectedRoom, durationHours, monthlyBookings);
      setSuggestedSlots(slots);
    }
  }, [step, bookingDate, selectedRoom, durationHours, monthlyBookings, calculateAvailableSlots]);

  const validateStep1 = () => {
    setError(null);
    if (!selectedRoom || !numberOfPeople || !durationHours) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
        return false;
    }

    const minPeople = 1;
    if (numberOfPeople < minPeople || numberOfPeople > maxPeople) {
        setError(`–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${minPeople} –¥–æ ${maxPeople}.`);
        return false;
    }

    if (durationHours <= 0) {
        setError('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.');
        return false;
    }
    if (durationHours > maxBookingDurationHours) {
        setError(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - ${maxBookingDurationHours} —á–∞—Å–∞.`);
        return false;
    }

    return true;
  };

  if (!isOpen) return null;

  const handleNextStep = async () => {
    setMessage('');
    if (!validateStep1()) {
      return;
    }
    setStep(2);
  };

  const handleDateChange = (date) => {
    setBookingDate(date);
    setError(null);
    setMessage('');
    setStartTime('');
    setEndTime('');
  };

  const handleTimeSelect = (slot) => {
    setStartTime(slot.start);
    setEndTime(slot.end);
    setError(null);
    setMessage('');
  };

  const handleBackStep = () => {
    setStep(1);
    setError(null);
    setSuggestedSlots([]);
    setMonthlyBookings([]);
    setFullyBookedDates([]);
  };

  const isDateDisabled = ({ date }) => {
    // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é Luxon, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è.
    const luxonDate = DateTime.fromJSDate(date, { zone: 'Asia/Almaty' });
    const luxonToday = DateTime.now().setZone('Asia/Almaty').startOf('day');
    if (luxonDate < luxonToday) {
      return true;
    }

    const dateString = luxonDate.toISODate();
    return fullyBookedDates.includes(dateString);
  };

  const tileClassName = ({ date, view }) => {
    if (view === 'month') {
      // üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º dateString, —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É.
      const dateString = DateTime.fromJSDate(date, { zone: 'Asia/Almaty' }).toISODate();
      if (fullyBookedDates.includes(dateString)) {
        return styles.fullyBooked;
      }
    }
    return null;
  };

  const handleCalendarNavigation = ({ activeStartDate }) => {
    if (activeStartDate) {
      setBookingDate(activeStartDate);
    }
  };

  const formatDurationLabel = (value) => {
    if (value < 1) return `${value * 60} –º–∏–Ω—É—Ç`;
    if (value === 1) return `1 —á–∞—Å`;
    return `${value} —á–∞—Å–∞`;
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose} disabled={loading}>
          &times;
</button>


{isBookingSuccessful ? (

<div className={styles.successContainer}>

<h2 className={styles.successTitle}>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</h2>

<p className={styles.successText}>{message}</p>

<p className={styles.successSubtext}>

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

</p>

<button className={styles.backButton} onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>

</div>

) : (

<>

<h2>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫</h2>

{error && <p className={styles.errorMessage}>{error}</p>}

{message && <p className={styles.successMessage}>{message}</p>}



{step === 1 && (

<form onSubmit={(e) => { e.preventDefault(); handleNextStep(); }}>

<div className={styles.section}>

<h3>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>

<div className={styles.formGroup}>

<label htmlFor="selectedRoom">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:</label>

<div className={styles.hallSelector}>

<button

type="button"

className={`${styles.hallButton} ${selectedRoom === 'second_hall' ? styles.active : ''}`}

onClick={() => {

setSelectedRoom('second_hall');

setNumberOfPeople(1);

}}

disabled={loading}

>

–ó–∞–ª

</button>

<button

type="button"

className={`${styles.hallButton} ${selectedRoom === 'summer_terrace' ? styles.active : ''}`}

onClick={() => {

setSelectedRoom('summer_terrace');

setNumberOfPeople(1);

}}

disabled={loading}

>

–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞

</button>

</div>

</div>


<div className={styles.formGroup}>

<label htmlFor="numberOfPeople">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:</label>

<div className={styles.partySizeControl}>

<button type="button" onClick={() => setNumberOfPeople(prev => Math.max(1, prev - 1))} disabled={loading || numberOfPeople <= 1 || !selectedRoom}>-</button>

<input

type="number"

id="numberOfPeople"

value={numberOfPeople}

onChange={(e) => setNumberOfPeople(Number(e.target.value))}

min="1"

max={maxPeople}

required

disabled={loading || !selectedRoom}

/>

<button type="button" onClick={() => setNumberOfPeople(prev => Math.min(maxPeople, prev + 1))} disabled={loading || numberOfPeople >= maxPeople || !selectedRoom}>+</button>

</div>

{selectedRoom && (

<p className={styles.maxPeopleInfo}>–ú–∞–∫—Å–∏–º—É–º: {maxPeople} —á–µ–ª–æ–≤–µ–∫</p>

)}

</div>


<div className={styles.formGroup}>

<label htmlFor="durationHours">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</label>

<div className={styles.durationControl}>

<input

type="range"

id="durationHours"

value={durationHours}

onChange={(e) => setDurationHours(Number(e.target.value))}

min="0.5"

max={maxBookingDurationHours}

step="0.5"

required

disabled={loading}

/>

<div className={styles.durationLabel}>

{formatDurationLabel(durationHours)}

</div>

</div>

</div>

</div>



<button type="submit" className={styles.submitButton} disabled={loading || !selectedRoom}>

–î–∞–ª–µ–µ

</button>

</form>

)}



{step === 2 && (

<>

<button onClick={handleBackStep} className={styles.backButton} disabled={loading}>

‚Üê –ù–∞–∑–∞–¥

</button>



<div className={styles.bookingStep2}>

<div className={styles.calendarContainer}>

<Calendar

minDate={today}

onChange={handleDateChange}

value={bookingDate}

tileDisabled={isDateDisabled}

tileClassName={tileClassName}

onActiveStartDateChange={handleCalendarNavigation}

/>

</div>


{loading && <p className={styles.loadingMessage}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω...</p>}


{suggestedSlots.length > 0 && !loading ? (

<div className={styles.availableSlotsContainer}>

<p className={styles.slotsHeader}>–°–ª–æ—Ç—ã –Ω–∞ {bookingDate?.toLocaleDateString()}</p>

<div className={styles.suggestedSlotsScroll}>

<div className={styles.suggestedSlotsContainer}>

{suggestedSlots.map((slot, index) => (

<button

key={index}

type="button"

className={`${styles.suggestedSlotButton} ${startTime === slot.start && styles.selectedSlot} ${!slot.isAvailable ? styles.slotUnavailable : ''}`}

onClick={() => slot.isAvailable && handleTimeSelect(slot)}

disabled={!slot.isAvailable}

>

{slot.start} - {slot.end}

</button>

))}

</div>

</div>

</div>

) : (

!loading && <p className={styles.noSlotsMessage}>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</p>

)}

</div>



{startTime && (

<form onSubmit={handleSubmit}>

<div className={styles.section}>

<h3>–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>

<p className={styles.sectionDescription}>–î–ª—è —Å–≤—è–∑–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.</p>

<div className={styles.formGroup}>

<label htmlFor="userName">–í–∞—à–µ –∏–º—è (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏):</label>

<input

type="text"

id="userName"

value={userName}

onChange={(e) => setUserName(e.target.value)}

required

disabled={loading}

placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"

/>

</div>

<div className={styles.formGroup}>

<label htmlFor="phoneNumber">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>

<IMaskInput

mask="+{7}(000)000-00-00"

definitions={{

'#': /[0-9]/,

}}

value={phoneNumber}

onAccept={(value) => setPhoneNumber(value)}

placeholder="+7(___)___-__-__"

required

disabled={loading}

className={styles.input}

/>

</div>

</div>



<div className={styles.section}>

<h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ <small>(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</small></h3>

<p className={styles.sectionDescription}>–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö.</p>

<div className={styles.formGroup}>

<label htmlFor="eventName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>

<input

type="text"

id="eventName"

value={eventName}

onChange={(e) => setEventName(e.target.value)}

disabled={loading}

placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é"

/>

</div>



<div className={styles.formGroup}>

<label htmlFor="eventDescription">–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>

<textarea

id="eventDescription"

rows="3"

value={eventDescription}

onChange={(e) => setEventDescription(e.target.value)}

disabled={loading}

placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å."

></textarea>

</div>



<div className={styles.formGroup}>

<label htmlFor="organizerContact">–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π:</label>

<input

type="text"

id="organizerContact"

value={organizerContact}

onChange={(e) => setOrganizerContact(e.target.value)}

disabled={loading}

placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @–Ω–∞—à_–∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏–ª–∏ +77001234567"

/>

</div>

</div>


<div className={styles.formGroup}>

<label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <small>(–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</small>:</label>

<textarea

id="comment"

rows="3"

value={comment}

onChange={(e) => setComment(e.target.value)}

disabled={loading}

></textarea>

</div>



<div className={`${styles.formGroup} ${styles.agreementCheckbox}`}>

<input

type="checkbox"

id="agreement"

checked={isAgreed}

onChange={(e) => setIsAgreed(e.target.checked)}

disabled={loading}

/>

<label htmlFor="agreement" className={styles.agreementLabel}>

–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å <a href="/documentsPdf/rules_compressed.pdf" target="_blank" rel="noopener noreferrer">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>

</label>

</div>


<button type="submit" className={styles.submitButton} disabled={!isAgreed || loading}>

{loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}

</button>

</form>

)}

</>

)}

</>

)}

</div>

</div>

);

};



export default BookingModal;
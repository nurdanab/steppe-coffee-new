// src/components/BookingModal/BookingModal.jsx
import React, { useState, useEffect } from 'react';
import styles from './BookingModal.module.scss';
import { supabase } from '../../supabaseClient';
import { IMaskInput } from 'react-imask';

const BookingModal = ({ isOpen, onClose, currentUserId, currentUserEmail }) => {
  const [bookingDate, setBookingDate] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [selectedRoom, setSelectedRoom] = useState('');
  const [numberOfPeople, setNumberOfPeople] = useState(1);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [userName, setUserName] = useState('');
  const [comment, setComment] = useState('');
 
  const [eventName, setEventName] = useState('');
  const [eventDescription, setEventDescription] = useState('');
  const [organizerContact, setOrganizerContact] = useState('');

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState(null);
  const [isAgreed, setIsAgreed] = useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–ª–∞–∂–∫–∞

  useEffect(() => {
    if (isOpen) {
      setUserName('');
      
      const today = new Date().toISOString().split('T')[0];
      setBookingDate(today);
      setStartTime('');
      setEndTime('');
      setSelectedRoom('');
      setNumberOfPeople(1);
      setPhoneNumber('');
      setComment('');
      setEventName('');
      setEventDescription('');
      setOrganizerContact('');
      setMessage('');
      setError(null);
      setIsAgreed(false); –∏
    }
  }, [isOpen, currentUserId, currentUserEmail]);

  if (!isOpen) return null;

  const cafeOpenTime = '08:00';
  const cafeCloseTime = '22:00';
  const maxBookingDurationHours = 3;
  const cleanupTimeHours = 1;

  const getRoomName = (roomKey) => {  
    switch (roomKey) {
      case 'second_hall':
        return '–í—Ç–æ—Ä–æ–π –∑–∞–ª –≤–Ω—É—Ç—Ä–∏';
      case 'summer_terrace':
        return '–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª';
    }
  };

  const checkAvailability = async (date, start, end, room, numPpl) => {
    setError(null);

    let minPeople = 0;
    let maxPeople = 0;

    switch (room) {
      case 'second_hall':
        minPeople = 1;
        maxPeople = 20;
        break;
      case 'summer_terrace':
        minPeople = 1;
        maxPeople = 10;
        break;
      default:
        minPeople = 1;
        maxPeople = 50;
        break;
    }

    if (numPpl < minPeople || numPpl > maxPeople) {
      return { available: false, message: `–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${minPeople} –¥–æ ${maxPeople}.` };
    }

    const startDateTime = new Date(`${date}T${start}`);
    const endDateTime = new Date(`${date}T${end}`);
    const durationMs = endDateTime - startDateTime;
    const durationHours = durationMs / (1000 * 60 * 60);

    if (durationHours <= 0) {
      return { available: false, message: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è.' };
    }
    if (durationHours > maxBookingDurationHours) {
      return { available: false, message: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - ${maxBookingDurationHours} —á–∞—Å–∞.` };
    }

    if (start < cafeOpenTime || end > cafeCloseTime) {
      return { available: false, message: `–ö–æ—Ñ–µ–π–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ${cafeOpenTime} –¥–æ ${cafeCloseTime}.` };
    }

    const currentDateTime = new Date();
    const currentDay = currentDateTime.toISOString().split('T')[0];
    const currentTime = currentDateTime.toTimeString().substring(0, 5);

    if (date < currentDay) {
        return { available: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.' };
    }
    if (date === currentDay && start < currentTime) {
        return { available: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è.' };
    }

    const { data: existingBookings, error: fetchError } = await supabase
      .from('bookings')
      .select('id, start_time, end_time, status')
      .eq('booking_date', date)
      .eq('selected_room', room);

    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', fetchError.message);
      return { available: false, message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' };
    }

    let isConflict = false;
    let hasConfirmedConflict = false;

    for (const booking of existingBookings) {
      const existingStart = booking.start_time;
      const existingEnd = booking.end_time;
      const bookingStatus = booking.status;

      const cleanUpStartTime = new Date(`${date}T${existingEnd}`);
      cleanUpStartTime.setHours(cleanUpStartTime.getHours() + cleanupTimeHours);
      const requiredNextAvailableTime = cleanUpStartTime.toTimeString().substring(0, 5);

      if ((start < requiredNextAvailableTime) && (end > existingStart)) {
          isConflict = true;
          if (bookingStatus === 'confirmed') {
              hasConfirmedConflict = true;
              break;
          }
      }
    }

    if (hasConfirmedConflict) {
        return { available: false, message: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –±—Ä–æ–Ω—å—é –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.' };
    } else if (isConflict) {
        return { available: 'queued', message: '–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∞—è –±—Ä–æ–Ω—å. –í–∞—à–∞ –±—Ä–æ–Ω—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.' };
    }

    return { available: true };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');
    setError(null);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!isAgreed) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.');
        setLoading(false);
        return;
    }

    if (!currentUserId) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫.');
        setLoading(false);
        return;
    }

    if (!bookingDate || !startTime || !endTime || !selectedRoom || !phoneNumber || !userName) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–î–∞—Ç–∞, –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ó–∞–ª, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –¢–µ–ª–µ—Ñ–æ–Ω, –ò–º—è).');
      setLoading(false);
      return;
    }

    const availabilityCheckResult = await checkAvailability(bookingDate, startTime, endTime, selectedRoom, numberOfPeople);

    let bookingStatusToSet = 'pending';
    if (!availabilityCheckResult.available) {
      setError(availabilityCheckResult.message);
      setLoading(false);
      return;
    } else if (availabilityCheckResult.available === 'queued') {
      bookingStatusToSet = 'queued';
      setMessage(availabilityCheckResult.message);
    }

    try {
      const { data: newBookingData, error: insertError } = await supabase
        .from('bookings')
        .insert([
          {
            booking_date: bookingDate,
            start_time: startTime,
            end_time: endTime,
            selected_room: selectedRoom,
            num_people: numberOfPeople,
            phone_number: phoneNumber,
            organizer_name: userName,
            comments: comment,
            user_id: currentUserId,
            status: bookingStatusToSet,
            event_name: eventName || null,
            event_description: eventDescription || null,
            organizer_contact: organizerContact || null,
          },
        ])
        .select();

      if (insertError) {
        throw insertError;
      }

      if (newBookingData && newBookingData.length > 0) {
        const newBooking = newBookingData[0];
        const telegramMessage = `
          <b>ü•≥ –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï!</b>
          #ID: <code>${newBooking.id.substring(0, 8)}</code>
          <b>–°—Ç–∞—Ç—É—Å:</b> ${newBooking.status === 'confirmed' ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : newBooking.status === 'pending' ? '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏' : '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'}
          <b>–î–∞—Ç–∞:</b> ${new Date(newBooking.booking_date).toLocaleDateString('ru-RU')}
          <b>–í—Ä–µ–º—è:</b> ${newBooking.start_time.substring(0, 5)} - ${newBooking.end_time.substring(0, 5)}
          <b>–ó–∞–ª:</b> ${getRoomName(newBooking.selected_room)}
          <b>–ö–æ–ª-–≤–æ —á–µ–ª.:</b> ${newBooking.num_people}
          <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> ${newBooking.organizer_name}
          <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${newBooking.phone_number}
          ${newBooking.event_name ? `<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b> ${newBooking.event_name}\n` : ''}
          ${newBooking.event_description ? `<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b> ${newBooking.event_description}\n` : ''}
          ${newBooking.organizer_contact ? `<b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> ${newBooking.organizer_contact}\n` : ''}
          ${newBooking.comments ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${newBooking.comments}` : ''}
        `;

        try {
          const { data, error: telegramError } = await supabase.functions.invoke('telegram-notification', {
            body: { message: telegramMessage },
          });

          if (telegramError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', telegramError);
          } else {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Telegram Edge Function –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        }
      }
      
      if (bookingStatusToSet === 'pending') {
        setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!');
      } else {
        setMessage('–í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!');
      }

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setBookingDate(new Date().toISOString().split('T')[0]);
      setStartTime('');
      setEndTime('');
      setSelectedRoom('');
      setNumberOfPeople(1);
      setPhoneNumber('');
      setUserName(currentUserEmail || '');
      setComment('');
      setEventName('');
      setEventDescription('');
      setOrganizerContact('');
      setIsAgreed(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

      setTimeout(() => {
        onClose();
      }, 3000);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏:', err.message);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—Ä–æ–Ω–∏: ${err.message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose} disabled={loading}>
          &times;
        </button>
        <h2>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫</h2>
        {error && <p className={styles.errorMessage}>{error}</p>}
        {message && <p className={styles.successMessage}>{message}</p>}
        <form onSubmit={handleSubmit}>
          {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è */}
          <div className={styles.formGroup}>
            <label htmlFor="bookingDate">–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
            <input
              type="date"
              id="bookingDate"
              value={bookingDate}
              onChange={(e) => setBookingDate(e.target.value)}
              required
              disabled={loading}
              min={new Date().toISOString().split('T')[0]}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="startTime">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</label>
            <input
              type="time"
              id="startTime"
              value={startTime}
              onChange={(e) => setStartTime(e.target.value)}
              required
              disabled={loading}
              min="08:00"
              max="22:00"
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="endTime">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
            <input
              type="time"
              id="endTime"
              value={endTime}
              onChange={(e) => setEndTime(e.target.value)}
              required
              disabled={loading}
              min="08:00"
              max="22:00"
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="selectedRoom">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:</label>
            <select
              id="selectedRoom"
              value={selectedRoom}
              onChange={(e) => setSelectedRoom(e.target.value)}
              required
              disabled={loading}
            >
              <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª --</option>
              <option value="second_hall">–í—Ç–æ—Ä–æ–π –∑–∞–ª –≤–Ω—É—Ç—Ä–∏ (–¥–æ 20 —á–µ–ª–æ–≤–µ–∫)</option>
              <option value="summer_terrace">–õ–µ—Ç–Ω–∏–∫ (–¥–æ 10 —á–µ–ª–æ–≤–µ–∫)</option>
            </select>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="numberOfPeople">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:</label>
            <input
              type="number"
              id="numberOfPeople"
              value={numberOfPeople}
              onChange={(e) => setNumberOfPeople(Number(e.target.value))}
              min="1"
              required
              disabled={loading}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="phoneNumber">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
            <IMaskInput
              mask="+{7}(000)000-00-00"
              definitions={{
                '#': /[0-9]/,
              }}
              value={phoneNumber}
              onAccept={(value) => setPhoneNumber(value)}
              placeholder="+7(___)___-__-__"
              required
              disabled={loading}
              className={styles.input}
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="userName">–í–∞—à–µ –∏–º—è (–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏):</label>
            <input
              type="text"
              id="userName"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              required
              disabled={loading}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
            />
          </div>

          {/* –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è */}
          <div className={styles.formGroup}>
            <label htmlFor="eventName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∞–Ω–æ–Ω—Å–∞, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <input
              type="text"
              id="eventName"
              value={eventName}
              onChange={(e) => setEventName(e.target.value)}
              disabled={loading}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—é"
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="eventDescription">–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∞–Ω–æ–Ω—Å–∞, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <textarea
              id="eventDescription"
              rows="3"
              value={eventDescription}
              onChange={(e) => setEventDescription(e.target.value)}
              disabled={loading}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å."
            ></textarea>
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="organizerContact">–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π (—Ç–µ–ª–µ—Ñ–æ–Ω/Instagram, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <input
              type="text"
              id="organizerContact"
              value={organizerContact}
              onChange={(e) => setOrganizerContact(e.target.value)}
              disabled={loading}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @–Ω–∞—à_–∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∏–ª–∏ +77001234567"
            />
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <textarea
              id="comment"
              rows="3"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              disabled={loading}
            ></textarea>
          </div>

          {/* –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ —Å–æ–≥–ª–∞—Å–∏—è */}
          <div className={`${styles.formGroup} ${styles.agreementCheckbox}`}>
            <input
              type="checkbox"
              id="agreement"
              checked={isAgreed}
              onChange={(e) => setIsAgreed(e.target.checked)}
              disabled={loading}
            />
            <label htmlFor="agreement" className={styles.agreementLabel}>
                <a href="/documentsPdf/rules_compressed.pdf" target="_blank" rel="noopener noreferrer">–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ñ–µ–π–Ω–∏.</a>
            </label>
          </div>

          <button type="submit" className={styles.submitButton} disabled={!isAgreed || loading}>
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default BookingModal;